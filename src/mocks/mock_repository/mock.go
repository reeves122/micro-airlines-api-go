// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/reeves122/micro-airlines-api-go/model"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// AddPlayer mocks base method.
func (m *MockIRepository) AddPlayer(player model.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", player)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPlayer indicates an expected call of AddPlayer.
func (mr *MockIRepositoryMockRecorder) AddPlayer(player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockIRepository)(nil).AddPlayer), player)
}

// GetAllPlayers mocks base method.
func (m *MockIRepository) GetAllPlayers() []model.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlayers")
	ret0, _ := ret[0].([]model.Player)
	return ret0
}

// GetAllPlayers indicates an expected call of GetAllPlayers.
func (mr *MockIRepositoryMockRecorder) GetAllPlayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlayers", reflect.TypeOf((*MockIRepository)(nil).GetAllPlayers))
}

// HealthCheck mocks base method.
func (m *MockIRepository) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockIRepositoryMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockIRepository)(nil).HealthCheck))
}
